#>
# Source Code for the Original Compiler for the
# Programming Language Wake
#
# LambdaTest.wk
#
# Licensed under the MIT license
# See LICENSE.TXT for details
#
# Author: Michael Fairhurst
# Revised By:
#
##

import Asserts;

@TestClass
every LambdaTest is:

	@Test
	~[test declared lambdas are not invoked ]~(Asserts) {
		{ Text ->
			Asserts.fail("Did not expect to run lambda with arg " + Text);
		};
	}

	@Test
	~[test self invoking lambda runs ]~(Asserts) {
		var Bool ran = false;
		({ ->
			ran = true;
		})();

		Asserts.that(ran)Equals(true);
	}

	@Test
	~[test declared lambda runs ]~(Asserts) {
		var Bool ran = false;
		var fn() lambda = { ->
			ran = true;
		};
		lambda();

		Asserts.that(ran)Equals(true);
	}

	@Test
	~[test run lambda with args ]~(Asserts) {
		var Bool ran = false;

		({ Bool ->
			Asserts.that(Bool)Equals(true);
		})(true);

		({ Bool ->
			Asserts.that(Bool)Equals(false);
		})(false);

		({ Text ->
			Asserts.that(Text)Equals('hey');
		})('hey');

		({ Text, $Text ->
			Asserts.that(Text)Equals($Text);
		})('hey', 'hey');
	}

	with Bool lambdaFunctionRan = false;
	methodNotesLambdaRan() {
		lambdaFunctionRan = true;
	}

	@Test
	~[test call function within lambda ]~(Asserts) {
		lambdaFunctionRan = false;
		({ ->
			methodNotesLambdaRan();
		})();
		Asserts.that(lambdaFunctionRan)Equals(true);
	}

	@Test
	~[test use property within lambda ]~(Asserts) {
		lambdaFunctionRan = false;
		({ ->
			lambdaFunctionRan = true;
		})();
		Asserts.that(lambdaFunctionRan)Equals(true);
	}

	@Test
	~[test lambda return value ]~(Asserts) {
		Asserts.that(({ -> return true; })())Equals(true);
		Asserts.that(({ Bool -> return Bool; })(true))Equals(true);
		Asserts.that(({ -> return false; })())Equals(false);
		Asserts.that(({ Bool -> return Bool; })(false))Equals(false);
	}

	call(some fn()) {
		some();
	}

	~[test method is called in other function]~(Asserts) {
		var Bool = false;
		call({ -> Bool = true; });
		Asserts.that(Bool)Equals(true);
	}
