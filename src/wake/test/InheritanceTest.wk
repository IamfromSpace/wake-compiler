#>
# Source Code for the Original Compiler for the
# Programming Language Wake
#
# InheritanceTest.wk
#
# Licensed under the MIT license
# See LICENSE.TXT for details
#
# Author: Michael Fairhurst
# Revised By:
#
##

import Printer;

import Asserts;
import InheritanceTestParent;
import InheritanceTestOverride;
import InheritanceTestFallthrough;
import InheritanceTestInterface;

every InheritanceTest is:

	provides
		Text:TestTransitiveNeeds <- "public need",
		InheritanceTestParent,
		InheritanceTestOverride,
		InheritanceTestFallthrough,
		InheritanceTestInterface,
		InheritanceTestParent:Override <- InheritanceTestOverride,
		InheritanceTestParent:Fallthrough <- InheritanceTestFallthrough,
		InheritanceTestParent:Interface <- InheritanceTestInterface;

	needs Printer;

	~[test parent gets parent class name]~(Asserts) {
		var InheritanceTestParent from this;
		Asserts.that(InheritanceTestParent.getClassName())Equals("InheritanceTestParent");
	}

	~[test override child gets child class name]~(Asserts) {
		var InheritanceTestOverride from this;
		Asserts.that(InheritanceTestOverride.getClassName())Equals("InheritanceTestOverride");
	}

	~[test override child from provider gets child class name]~(Asserts) {
		var InheritanceTestParent = InheritanceTestParent:Override from this;
		Asserts.that(InheritanceTestParent.getClassName())Equals("InheritanceTestOverride");
	}

	~[test override child after cast gets child class name]~(Asserts) {
		var InheritanceTestParent = InheritanceTestOverride from this;
		Asserts.that(InheritanceTestParent.getClassName())Equals("InheritanceTestOverride");
	}

	~[test fallthrough child gets child class name]~(Asserts) {
		var InheritanceTestFallthrough from this;
		Asserts.that(InheritanceTestFallthrough.getClassName())Equals("InheritanceTestParent");
	}

	~[test fallthrough child from provider gets child class name]~(Asserts) {
		var InheritanceTestParent = InheritanceTestParent:Fallthrough from this;
		Asserts.that(InheritanceTestParent.getClassName())Equals("InheritanceTestParent");
	}

	~[test fallthrough child after cast gets child class name]~(Asserts) {
		var InheritanceTestParent = InheritanceTestFallthrough from this;
		Asserts.that(InheritanceTestParent.getClassName())Equals("InheritanceTestParent");
	}

	~[test implementing child gets child class name]~(Asserts) {
		var InheritanceTestInterface from this;
		Asserts.that(InheritanceTestInterface.getClassName())Equals("InheritanceTestInterface");
	}

	~[test implementing child from provider gets child class name]~(Asserts) {
		var InheritanceTestParent = InheritanceTestParent:Interface from this;
		Asserts.that(InheritanceTestParent.getClassName())Equals("InheritanceTestInterface");
	}

	~[test implementing child after cast gets child class name]~(Asserts) {
		var InheritanceTestParent = InheritanceTestInterface from this;
		Asserts.that(InheritanceTestParent.getClassName())Equals("InheritanceTestInterface");
	}

	~[test parent has need fulfilled]~ (Asserts) {
		var InheritanceTestParent from this;
		Asserts.that(InheritanceTestParent.Text)Equals("public need");
	}

	~[test fallthrough has need fulfilled]~ (Asserts) {
		var InheritanceTestFallthrough from this;
		Asserts.that(InheritanceTestFallthrough.Text)Equals("public need");
	}

	~[test interface has need redefined]~ (Asserts) {
		var InheritanceTestInterface from this;
		Asserts.that(InheritanceTestInterface.Text)Equals("not injected");
	}
