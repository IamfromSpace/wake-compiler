#>
# Source Code for the Original Compiler for the
# Programming Language Wake
#
# ListIntersectTest.wk
#
# Licensed under the MIT license
# See LICENSE.TXT for details
#
# Author: Michael Fairhurst
# Revised By:
#
##

import Asserts;

every ListIntersectTest is:

	~[ test intersect empty num list with empty num list is empty num list ]~(Asserts) {
		var Num[] = [];
		Asserts.that(Num[].intersect(Num[]).getSize())Equals(0);
	}

	~[ test intersect empty text list with empty text list is empty text list ]~(Asserts) {
		var Text[] = [];
		Asserts.that(Text[].intersect(Text[]).getSize())Equals(0);
	}

	~[ test intersect empty num list with nonempty num list is empty num list ]~(Asserts) {
		var Num[] = [];
		var $Num[] = [];
		$Num[0] = 4;
		Asserts.that($Num[].intersect(Num[]).getSize())Equals(0);
		Asserts.that(Num[].intersect($Num[]).getSize())Equals(0);
	}

	~[ test intersect empty text list with nonempty text list is empty text list ]~(Asserts) {
		var Text[] = [];
		var $Text[] = [];
		$Text[0] = "hey";
		Asserts.that($Text[].intersect(Text[]).getSize())Equals(0);
		Asserts.that(Text[].intersect($Text[]).getSize())Equals(0);
	}

	~[ test intersect nonempty num list with nonempty num list is nonempty num list ]~(Asserts) {
		var Num[] = [];
		Num[0] = 5;
		var $Num[] = [];
		$Num[0] = 5;
		Asserts.that(Num[].intersect($Num[]).getSize())Equals(1);
		Asserts.that(Num[].intersect($Num[])[0])Equals(5);
		Asserts.that($Num[].intersect(Num[]).getSize())Equals(1);
		Asserts.that($Num[].intersect(Num[])[0])Equals(5);
	}

	~[ test intersect nonempty text list with nonempty text list is nonempty text list ]~(Asserts) {
		var Text[] = [];
		Text[0] = "hey";
		var $Text[] = [];
		$Text[0] = "hey";
		Asserts.that(Text[].intersect($Text[]).getSize())Equals(1);
		Asserts.that(Text[].intersect($Text[])[0])Equals("hey");
		Asserts.that($Text[].intersect(Text[]).getSize())Equals(1);
		Asserts.that($Text[].intersect(Text[])[0])Equals("hey");
	}

	~[ test intersect different num lists with no commonality is empty list ]~(Asserts) {
		var Num[] = [];
		var $Num[] = [];
		Num[0] = 1;
		Num[1] = 2;
		$Num[0] = 3;
		$Num[1] = 4;
		Asserts.that(Num[].intersect($Num[]).getSize())Equals(0);
		Asserts.that($Num[].intersect(Num[]).getSize())Equals(0);
	}

	~[ test intersect different text lists with no commonality is empty list ]~(Asserts) {
		var Text[] = [];
		var $Text[] = [];
		Text[0] = "one";
		Text[1] = "two";
		$Text[0] = "three";
		$Text[1] = "four";
		Asserts.that(Text[].intersect($Text[]).getSize())Equals(0);
		Asserts.that($Text[].intersect(Text[]).getSize())Equals(0);
	}

	~[ test intersect same num lists but different orders returns both ]~(Asserts) {
		var Num[] = [];
		var $Num[] = [];
		Num[0] = 0;
		Num[1] = 1;
		$Num[0] = 1;
		$Num[1] = 0;

		Asserts.that(Num[].intersect($Num[]).getSize())Equals(2);
		Asserts.that(Num[].intersect($Num[])[0])Equals(0);
		Asserts.that(Num[].intersect($Num[])[1])Equals(1);
		Asserts.that($Num[].intersect(Num[]).getSize())Equals(2);
		Asserts.that($Num[].intersect(Num[])[0])Equals(1);
		Asserts.that($Num[].intersect(Num[])[1])Equals(0);
	}

	~[ test intersect same text lists but different orders returns both ]~(Asserts) {
		var Text[] = [];
		var $Text[] = [];
		Text[0] = "hey";
		Text[1] = "yo";
		$Text[0] = "yo";
		$Text[1] = "hey";

		Asserts.that(Text[].intersect($Text[]).getSize())Equals(2);
		Asserts.that(Text[].intersect($Text[])[0])Equals("hey");
		Asserts.that(Text[].intersect($Text[])[1])Equals("yo");
		Asserts.that($Text[].intersect(Text[]).getSize())Equals(2);
		Asserts.that($Text[].intersect(Text[])[0])Equals("yo");
		Asserts.that($Text[].intersect(Text[])[1])Equals("hey");
	}

	~[ test intersect two common nums are kept ]~(Asserts) {
		var Num[] = [];
		var $Num[] = [];
		Num[0] = 0;
		Num[1] = 1;
		Num[2] = 2;
		$Num[0] = 3;
		$Num[1] = 1;
		$Num[2] = 2;
		Asserts.that(Num[].intersect($Num[]).getSize())Equals(2);
		Asserts.that(Num[].intersect($Num[])[0])Equals(1);
		Asserts.that(Num[].intersect($Num[])[1])Equals(2);
		Asserts.that($Num[].intersect(Num[]).getSize())Equals(2);
		Asserts.that($Num[].intersect(Num[])[0])Equals(1);
		Asserts.that($Num[].intersect(Num[])[1])Equals(2);
	}

	~[ test intersect two common texts are kept ]~(Asserts) {
		var Text[] = [];
		var $Text[] = [];
		Text[0] = "zero";
		Text[1] = "one";
		Text[2] = "two";
		$Text[0] = "three";
		$Text[1] = "one";
		$Text[2] = "two";
		Asserts.that(Text[].intersect($Text[]).getSize())Equals(2);
		Asserts.that(Text[].intersect($Text[])[0])Equals("one");
		Asserts.that(Text[].intersect($Text[])[1])Equals("two");
		Asserts.that($Text[].intersect(Text[]).getSize())Equals(2);
		Asserts.that($Text[].intersect(Text[])[0])Equals("one");
		Asserts.that($Text[].intersect(Text[])[1])Equals("two");
	}
